import re


class Sorter:
    """
    Class to manage sorting by efficacy (i.e. sorting to make sure passwords most at the top are ones that are most
    common).
    This uses statistics analyzed from rockyou.txt to look at combinations of features of passwords and their
    frequencies.
    """

    # Feature bitmask
    ALL_UPPER = 1
    FIRST_CHAR_UPPER = 2
    ALL_LOWER = 4
    HAS_UPPER = 8
    HAS_LOWER = 16

    ENDS_IN_NUMBER = 32
    ENDS_IN_SPEC = 64
    LEET = 128
    HAS_NUMBER = 256
    HAS_SPEC = 512
    ONLY_NUMBERS = 1024

    TOTAL = 2047

    criterium = {
        ALL_UPPER: r"(?=.*[A-Z])^[^a-z]+$",  # The only letters present are uppercase
        FIRST_CHAR_UPPER: r"^[A-Z]{1}[^A-Z]",  # Uppercase character followed by any other character
        HAS_UPPER: r"[A-Z]",  # Uppercase character present anywhere in string

        ALL_LOWER: r"(?=.*[a-z])^[^A-Z]+$",
        HAS_LOWER: r"[a-z]",

        ENDS_IN_NUMBER: r"[^\d][\d]+$",
        ONLY_NUMBERS: r"^[\d]+$",
        HAS_NUMBER: r"[\d]",

        ENDS_IN_SPEC: r"[A-Za-z\d][^A-Za-z\d]+$",
        HAS_SPEC: r"[^A-Za-z\d]",

        # Cheap method. Look for a 'leet' character and then a letter
        LEET: r"[^A-Za-z29`~#%^&()\-\_=\\\/?.,><][A-Za-z]",
    }
    # Compile regex patterns before looping for optimization
    criterium = {k: re.compile(v) for k, v in criterium.items()}

    # List of bitmask of frequencies and how common they are.
    # e.g. 272 = HAS_NUMBER & HAS_LOWER(case character), which has a 29.8% chance of occurring.
    # Figures for criterium_frequencies and length_chances analyzed from rockyou.txt
    criterium_frequencies = {
        16: 0.780476585702429,
        4: 0.7680569582912513,
        20: 0.7680569582912513,
        256: 0.4967950961471156,
        272: 0.29797106086817393,
        260: 0.29540113796586104,
        276: 0.29540113796586104,
        32: 0.28328150155495335,
        288: 0.28328150155495335,
        48: 0.2783216503504895,
        304: 0.2783216503504895,
        36: 0.27592172234832957,
        52: 0.27592172234832957,
        292: 0.27592172234832957,
        308: 0.27592172234832957,
        1024: 0.1933541993740188,
        1280: 0.1933541993740188,
        8: 0.03807885763427097,
        1: 0.025659230223093306,
        9: 0.025659230223093306,
        128: 0.019759407217783468,
        144: 0.019339419817405477,
        132: 0.019129426117216485,
        148: 0.019129426117216485,
        384: 0.018149455516334508,
        400: 0.01777946661600152,
        388: 0.017599472015839526,
        404: 0.017599472015839526,
        24: 0.012419627411177664,
        2: 0.012379628611141665,
        10: 0.012379628611141665,
        18: 0.01221963341099767,
        26: 0.01221963341099767,
        512: 0.010319690409287721,
        528: 0.009769706908792737,
        516: 0.009509714708558744,
        532: 0.009509714708558744,
        264: 0.007889763307100787,
        40: 0.0073397798066058015,
        296: 0.0073397798066058015,
        64: 0.006109816705498835,
        576: 0.006109816705498835,
        80: 0.00594982150535484,
        592: 0.00594982150535484,
        68: 0.005859824205273842,
        84: 0.005859824205273842,
        580: 0.005859824205273842,
        596: 0.005859824205273842,
        257: 0.005319840404787856,
        265: 0.005319840404787856,
        33: 0.004939851804445867,
        41: 0.004939851804445867,
        289: 0.004939851804445867,
        297: 0.004939851804445867,
        258: 0.0025699229023129306,
        266: 0.0025699229023129306,
        280: 0.0025699229023129306,
        34: 0.002509924702258932,
        42: 0.002509924702258932,
        290: 0.002509924702258932,
        298: 0.002509924702258932,
        274: 0.0024299271021869344,
        282: 0.0024299271021869344,
        56: 0.0023999280021599354,
        312: 0.0023999280021599354,
        50: 0.002369928902132936,
        58: 0.002369928902132936,
        306: 0.002369928902132936,
        314: 0.002369928902132936,
        640: 0.0021599352019439416,
        656: 0.002099937001889943,
        644: 0.001959941201763947,
        660: 0.001959941201763947,
        768: 0.0013799586012419628,
        784: 0.0012099637010889674,
        772: 0.0010799676009719708,
        788: 0.0010799676009719708,
        160: 0.000889973300800976,
        416: 0.000889973300800976,
        176: 0.0008799736007919762,
        432: 0.0008799736007919762,
        164: 0.0008599742007739768,
        180: 0.0008599742007739768,
        420: 0.0008599742007739768,
        436: 0.0008599742007739768,
        136: 0.000629981100566983,
        392: 0.0005499835004949852,
        544: 0.0005499835004949852,
        800: 0.0005499835004949852,
        896: 0.0005499835004949852,
        912: 0.0005399838004859854,
        560: 0.000519984400467986,
        816: 0.000519984400467986,
        548: 0.0004899853004409867,
        564: 0.0004899853004409867,
        804: 0.0004899853004409867,
        820: 0.0004899853004409867,
        900: 0.0004299871003869884,
        916: 0.0004299871003869884,
        129: 0.00041998740037798866,
        137: 0.00041998740037798866,
        385: 0.00036998890033299,
        393: 0.00036998890033299,
        520: 0.00036998890033299,
        536: 0.000259992200233993,
        320: 0.00023999280021599353,
        832: 0.00023999280021599353,
        152: 0.00020999370018899433,
        192: 0.0001999940001799946,
        208: 0.0001999940001799946,
        648: 0.0001999940001799946,
        704: 0.0001999940001799946,
        720: 0.0001999940001799946,
        196: 0.00017999460016199513,
        212: 0.00017999460016199513,
        408: 0.00017999460016199513,
        708: 0.00017999460016199513,
        724: 0.00017999460016199513,
        3: 0.00015999520014399568,
        11: 0.00015999520014399568,
        514: 0.00015999520014399568,
        522: 0.00015999520014399568,
        776: 0.00014999550013499596,
        35: 0.0001399958001259962,
        43: 0.0001399958001259962,
        259: 0.0001399958001259962,
        267: 0.0001399958001259962,
        291: 0.0001399958001259962,
        299: 0.0001399958001259962,
        530: 0.0001399958001259962,
        538: 0.0001399958001259962,
        664: 0.0001399958001259962,
        792: 0.0001299961001169965,
        72: 0.00011999640010799676,
        584: 0.00011999640010799676,
        904: 0.00011999640010799676,
        130: 0.00010999670009899703,
        138: 0.00010999670009899703,
        336: 0.00010999670009899703,
        513: 0.00010999670009899703,
        521: 0.00010999670009899703,
        848: 0.00010999670009899703,
        920: 0.00010999670009899703,
        324: 9.99970000899973e-05,
        340: 9.99970000899973e-05,
        836: 9.99970000899973e-05,
        852: 9.99970000899973e-05,
        88: 8.999730008099757e-05,
        146: 8.999730008099757e-05,
        154: 8.999730008099757e-05,
        600: 8.999730008099757e-05,
        66: 7.999760007199784e-05,
        74: 7.999760007199784e-05,
        82: 7.999760007199784e-05,
        90: 7.999760007199784e-05,
        578: 7.999760007199784e-05,
        586: 7.999760007199784e-05,
        594: 7.999760007199784e-05,
        602: 7.999760007199784e-05,
        386: 6.99979000629981e-05,
        394: 6.99979000629981e-05,
        448: 6.99979000629981e-05,
        464: 6.99979000629981e-05,
        960: 6.99979000629981e-05,
        976: 6.99979000629981e-05,
        402: 5.999820005399838e-05,
        410: 5.999820005399838e-05,
        452: 5.999820005399838e-05,
        468: 5.999820005399838e-05,
        641: 5.999820005399838e-05,
        642: 5.999820005399838e-05,
        649: 5.999820005399838e-05,
        650: 5.999820005399838e-05,
        964: 5.999820005399838e-05,
        980: 5.999820005399838e-05,
        658: 4.999850004499865e-05,
        666: 4.999850004499865e-05,
        552: 3.999880003599892e-05,
        808: 3.999880003599892e-05,
        65: 2.999910002699919e-05,
        73: 2.999910002699919e-05,
        168: 2.999910002699919e-05,
        424: 2.999910002699919e-05,
        568: 2.999910002699919e-05,
        577: 2.999910002699919e-05,
        585: 2.999910002699919e-05,
        770: 2.999910002699919e-05,
        778: 2.999910002699919e-05,
        786: 2.999910002699919e-05,
        794: 2.999910002699919e-05,
        824: 2.999910002699919e-05,
        131: 1.999940001799946e-05,
        139: 1.999940001799946e-05,
        184: 1.999940001799946e-05,
        200: 1.999940001799946e-05,
        216: 1.999940001799946e-05,
        440: 1.999940001799946e-05,
        515: 1.999940001799946e-05,
        523: 1.999940001799946e-05,
        672: 1.999940001799946e-05,
        680: 1.999940001799946e-05,
        688: 1.999940001799946e-05,
        696: 1.999940001799946e-05,
        712: 1.999940001799946e-05,
        728: 1.999940001799946e-05,
        769: 1.999940001799946e-05,
        777: 1.999940001799946e-05,
        898: 1.999940001799946e-05,
        906: 1.999940001799946e-05,
        914: 1.999940001799946e-05,
        922: 1.999940001799946e-05,
        928: 1.999940001799946e-05,
        936: 1.999940001799946e-05,
        944: 1.999940001799946e-05,
        952: 1.999940001799946e-05,
        161: 9.99970000899973e-06,
        162: 9.99970000899973e-06,
        163: 9.99970000899973e-06,
        169: 9.99970000899973e-06,
        170: 9.99970000899973e-06,
        171: 9.99970000899973e-06,
        194: 9.99970000899973e-06,
        202: 9.99970000899973e-06,
        210: 9.99970000899973e-06,
        218: 9.99970000899973e-06,
        328: 9.99970000899973e-06,
        344: 9.99970000899973e-06,
        387: 9.99970000899973e-06,
        395: 9.99970000899973e-06,
        417: 9.99970000899973e-06,
        418: 9.99970000899973e-06,
        419: 9.99970000899973e-06,
        425: 9.99970000899973e-06,
        426: 9.99970000899973e-06,
        427: 9.99970000899973e-06,
        456: 9.99970000899973e-06,
        472: 9.99970000899973e-06,
        545: 9.99970000899973e-06,
        546: 9.99970000899973e-06,
        553: 9.99970000899973e-06,
        554: 9.99970000899973e-06,
        562: 9.99970000899973e-06,
        570: 9.99970000899973e-06,
        643: 9.99970000899973e-06,
        651: 9.99970000899973e-06,
        706: 9.99970000899973e-06,
        714: 9.99970000899973e-06,
        722: 9.99970000899973e-06,
        730: 9.99970000899973e-06,
        801: 9.99970000899973e-06,
        802: 9.99970000899973e-06,
        809: 9.99970000899973e-06,
        810: 9.99970000899973e-06,
        818: 9.99970000899973e-06,
        826: 9.99970000899973e-06,
        840: 9.99970000899973e-06,
        856: 9.99970000899973e-06,
        897: 9.99970000899973e-06,
        905: 9.99970000899973e-06,
        968: 9.99970000899973e-06,
        984: 9.99970000899973e-06,
    }

    # The frequency that a pw of x length was found in rockyou.txt (hits / total lines)
    length_chances = {
        1: 0.000341596935,
        2: 0.002398149911,
        3: 0.017491157345,
        4: 0.127366857192,
        5: 1.810080330354,
        6: 13.589506867179,
        7: 17.479006254082,
        8: 20.684642519853,
        9: 15.278348171073,
        10: 14.040958587925,
        11: 6.036073612327,
        12: 3.869589165549,
        13: 2.538225568447,
        14: 1.730578872257,
        15: 1.122403872008,
        16: 0.823276498807,
        17: 0.255897932509,
        18: 0.161889061725,
        19: 0.106982582948,
        20: 0.089930621663,
        21: 0.051574165819,
        22: 0.041967623443,
        23: 0.032995475374,
        24: 0.026177479406,
        25: 0.019408283001,
        26: 0.014821124159,
        27: 0.010261850782,
        28: 0.007096850609,
        29: 0.005179724953,
        30: 0.004956641240,
        31: 0.003095286513,
        32: 0.002593348160,
        33: 0.001247874518,
        34: 0.001185132223,
        35: 0.000725022066,
        36: 0.000725022066,
        37: 0.000467081523,
        38: 0.000390396497,
        39: 0.000446167425,
        40: 0.000334625569,
        41: 0.000292797373,
        42: 0.000341596935,
        43: 0.000271883275,
        44: 0.000188226883,
        45: 0.000209140981,
        46: 0.000139427320,
        47: 0.000174284151,
        48: 0.000174284151,
    }

    def __init__(self):
        self.min_max_lengths = min(Sorter.length_chances.keys()), max(Sorter.length_chances.keys())

    @staticmethod
    def get_combo(string):
        """Get combination bitmask of all features of a password"""
        num = 0
        for combo_int, regex in Sorter.criterium.items():
            if regex.search(string):
                num += combo_int

        return num

    def sort_weight_alphabet(self, x):
        """Sort x first by efficacy (password-likeliness) and then default"""
        x = x.strip()
        weight = 1

        # Length
        if self.min_max_lengths[0] <= len(x) <= self.min_max_lengths[1]:
            weight *= Sorter.length_chances[len(x)]
        else:
            return 0, x

        # Combination of features
        criterium_combo = Sorter.get_combo(x)
        if criterium_combo not in Sorter.criterium_frequencies:
            return 0, x
        weight *= Sorter.criterium_frequencies[criterium_combo]

        return -weight, x
